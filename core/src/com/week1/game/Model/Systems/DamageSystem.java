package com.week1.game.Model.Systems;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.utils.IntMap;
import com.week1.game.Model.Components.DamagingComponent;
import com.week1.game.Model.Components.HealthComponent;
import com.week1.game.Model.Events.DamageEvent;

import java.util.ArrayList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

/*
 * System responsible for handling damage events.
 * Unlike other systems, it does not iterate over a list of nodes at every update.
 * Instead, it handles events generated by the TargetingSystem.
 * All events are handled in the update step.
 */
public class DamageSystem implements ISystem, Subscriber<DamageEvent>, Publisher<DamageEvent> {

    private ArrayList<Subscriber<DamageEvent>> deathSubscribers = new ArrayList<>();
    private Queue<DamageEvent> damageEvents = new ConcurrentLinkedQueue<>();
    private IntMap<HealthComponent> healthComponents = new IntMap<>();
    private IntMap<DamagingComponent> damagingComponents = new IntMap<>();

    @Override
    public void update(float delta) {
        for (DamageEvent damageEvent: damageEvents) {
            HealthComponent victimHealth = healthComponents.get(damageEvent.victimID);
            DamagingComponent damagingComponent = damagingComponents.get(damageEvent.damagerID);
            
            Gdx.app.log("DamageSystem", "Dealing Damage to " + damageEvent.victimID + " with current health " + victimHealth.curHealth);
            if (victimHealth.curHealth <= 0) continue; // Can't be dealt more damage below 0.
            victimHealth.curHealth -=damagingComponent.baseDamage;
            Gdx.app.log("DamageSystem", "health now " + victimHealth.curHealth);
            if (victimHealth.curHealth <= 0) {
                // Inform death subscribers that a death has occurred.
                for (Subscriber<DamageEvent> deathEventSubscriber: deathSubscribers) {
                    deathEventSubscriber.process(damageEvent);
                }
            }
        }
        damageEvents.clear();
    }

    @Override
    public void remove(int entID) {
        healthComponents.remove(entID);
        damagingComponents.remove(entID);
    }

    public void addHealth(int entID, HealthComponent healthComponent) {
        healthComponents.put(entID, healthComponent);
    }

    public void addDamage(int entID, DamagingComponent damagingComponent) {
        damagingComponents.put(entID, damagingComponent);
    }

    @Override
    public void process(DamageEvent damageEvent) {
        damageEvents.add(damageEvent);
    }

    @Override
    public void addSubscriber(Subscriber<DamageEvent> subscriber) {
        deathSubscribers.add(subscriber);
    }

}
